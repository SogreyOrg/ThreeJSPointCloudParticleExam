/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/js/main.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/js/main.js":
/*!************************!*\
  !*** ./src/js/main.js ***!
  \************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nlet ThreeIns;\r\n\r\n\r\n\r\nwindow.onload = function()\r\n{\r\n    ThreeIns = new ThreeJsClass();\r\n    window.ThreeIns = ThreeIns;\r\n}\r\n//test \r\n\r\n\r\n\r\n\tfunction ThreeJsClass() {\r\n        if (!Detector.webgl) {\r\n            Detector.addGetWebGLMessage()\r\n        };\r\n\r\n        setTimeout(() => {\r\n            let maxTime = 0;\r\n            bisN = true;\r\n            particles_wave.forEach(function (e,i,arr)\r\n            {\r\n                let time_exec = Math.random() * 500 + 500 ;\r\n                let time_delay = Math.random() * 300 ;\r\n                maxTime =( maxTime > time_exec + time_delay ?maxTime :time_exec + time_delay );\r\n                let tweenIns = new TWEEN.Tween(e.position).to(\r\n                    {\r\n                        x:wave_coord[i].x, \r\n                        y:wave_coord[i].y,\r\n                        z:wave_coord[i].z\r\n                    },time_exec).easing(TWEEN.Easing.Quadratic.InOut).delay(time_delay);\r\n                tweenIns.start();\r\n            });\r\n\r\n            setTimeout(() => {\r\n                bWavesing = true;\r\n            }, maxTime - 200);\r\n        }, 1000);\r\n\r\n        let container, stats;\r\n        let camera, scene, renderer, geometry, materials = [], parameters, i, h, color, size;\r\n        let mouseX = 0, mouseY = 0;\r\n        let windowHalfX = window.innerWidth / 2;\r\n        let windowHalfY = window.innerHeight / 2;\r\n\r\n        let geom;\r\n        let mat;\r\n\r\n        let bflag = true;\r\n        let bWavesing = false;\r\n        let bisN = false;\r\n        let clock = new THREE.Clock();\r\n\r\n        /**\r\n         * 辉光\r\n         * */\r\n\r\n        let composer, mixer;\r\n        let params = {\r\n            exposure: 2,\r\n            bloomStrength: 2,\r\n            bloomThreshold: 0,\r\n            bloomRadius: 0\r\n        };\r\n\r\n        /**\r\n         * 辉光\r\n         */\r\n         \r\n        /**\r\n         * 波浪 start\r\n         */\r\n\r\n        const SEPARATION = 100, AMOUNTX = 50, AMOUNTY = 50;\r\n        let particles_wave = new Array();\r\n        let particle_wave;\r\n        let geometry_wave = new THREE.Geometry();\r\n        let count_wave = 1;\r\n        let wave_coord = new Array();\r\n        \r\n        /**\r\n         * 波浪 end\r\n         */\r\n\r\n         /**\r\n         *  smoke start \r\n         */\r\n\r\n\r\n        let smoke_particles = [];\r\n\r\n\r\n        /**\r\n         *  smoke end \r\n         */\r\n\r\n\r\n        /**\r\n         * img 数据 start\r\n         */\r\n        let canvas = document.createElement('canvas');\r\n        let content = canvas.getContext('2d');\r\n        let img = new Image();\r\n        let imgData ;\r\n        img.src = \"static/img/5.png\";\r\n        canvas.style.position = 'absolute';\r\n\r\n        if (window.innerWidth > 720)\r\n        {\r\n            canvas.width = 250;\r\n            canvas.height = 250;\r\n        }\r\n        else \r\n        {\r\n            canvas.width = 200;\r\n            canvas.height = 200;\r\n        }\r\n\r\n        \r\n        canvas.style.display = 'none';\r\n\r\n        let imgCoord = [];\r\n        let imgVecColor = [];\r\n        /**\r\n         * img 数据 end\r\n         */\r\n\r\n        this.init = function()\r\n        {\r\n            let _this = this;\r\n            img.onload = function () {\r\n                content.drawImage(img, 0, 0 ,canvas.width, canvas.height);\r\n                imgData = content.getImageData(0,0,canvas.width, canvas.height);\r\n                _this.initThreeJS();\r\n            };\r\n        }\r\n\r\n        this.initPost = function()\r\n        {\r\n            console.log('init postprocess');\r\n\r\n            composer = new THREE.EffectComposer( renderer );\r\n            console.log(composer);\r\n            composer.setSize( window.innerWidth, window.innerHeight );\r\n            let pass = new THREE.RenderPass( scene, camera );\r\n            composer.addPass(  pass );\r\n\r\n            \r\n            let pass1 = new THREE.ShaderPass(THREE.SepiaShader);\r\n            composer.addPass( pass1 );\r\n            pass1.renderToScene = true;\r\n        }\r\n\r\n\r\n        this.initThreeJS = function () {\r\n\r\n            container = document.createElement('div');\r\n            container.id = 'threejsDiv';\r\n\r\n            document.body.appendChild(container);\r\n            camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 3000);\r\n            camera.position.z = 1000;\r\n            scene = new THREE.Scene();\r\n            scene.fog = new THREE.FogExp2(0x000000, 0.0005);\r\n\r\n\r\n            console.log(renderer);\r\n            renderer = new THREE.WebGLRenderer({antialias: true, alpha: true});\r\n            renderer.setPixelRatio((window.devicePixelRatio) ? window.devicePixelRatio : 1);\r\n            renderer.autoClear = false;\r\n            renderer.setClearColor(0x000000, 0);\r\n            renderer.setSize(window.innerWidth, window.innerHeight);\r\n\r\n            container.appendChild(renderer.domElement);\r\n            stats = new Stats();\r\n            //container.appendChild(stats.dom);\r\n            document.addEventListener('mousemove',  onDocumentMouseMove,    false);\r\n            document.addEventListener('touchstart', onDocumentTouchStart,   false);\r\n            document.addEventListener('touchmove',  onDocumentTouchMove,    false);\r\n            window.addEventListener  ('resize',     onWindowResize,         false);\r\n\r\n            this.initPost();\r\n\r\n            geometry = new THREE.Geometry();\r\n            geom = new THREE.Geometry();\r\n\r\n            GenrateWaves();\r\n            //GenrateSmoke();\r\n            GenrateAround();\r\n            var lights = [];\r\n\r\n            lights[0] = new THREE.DirectionalLight(0xffffff, 1);\r\n            lights[0].position.set(1, 0, 0);\r\n            lights[1] = new THREE.DirectionalLight(0x11E8BB, 1);\r\n            lights[1].position.set(0.75, 1, 0.5);\r\n            lights[2] = new THREE.DirectionalLight(0x8200C9, 1);\r\n            lights[2].position.set(-0.75, -1, 0.5);\r\n            scene.add(lights[0]);\r\n            scene.add(lights[1]);\r\n            scene.add(lights[2]);\r\n\r\n            animate();\r\n\r\n        }\r\n\r\n        function IsTransparent(x, y) {\r\n            let total = canvas.width * canvas.height * 4;\r\n            let index = total - (x * canvas.height * 4) + (y * 4);\r\n            return (parseInt(imgData.data[index + 3]) != 0);\r\n        }\r\n\r\n        function GetVecColor(x, y) {\r\n            let total = canvas.width * canvas.height * 4;\r\n            let index = total - (x * canvas.height * 4) + (y * 4);\r\n            let color = new THREE.Color(imgData.data[index] / 255, imgData.data[index + 1] / 255, imgData.data[index + 2] / 255);\r\n            return color;\r\n        }\r\n\r\n        function GenrateSmoke()\r\n        {\r\n\r\n            let loader = new THREE.TextureLoader();\r\n            let smoke_t2d =  loader.load('https://s3-us-west-2.amazonaws.com/s.cdpn.io/95637/Smoke-Element.png');\r\n            let smoke_mat = new THREE.MeshLambertMaterial({color: 0x00ffff, map: smoke_t2d, transparent: true});\r\n            \r\n            let textT2d = loader.load('https://s3-us-west-2.amazonaws.com/s.cdpn.io/95637/quickText.png');\r\n            let text_mat = new THREE.MeshLambertMaterial({color: 0x00ffff, opacity: 1, map: textT2d, transparent: true, blending: THREE.AdditiveBlending});\r\n            let smoke_geo = new THREE.PlaneGeometry(500,500);\r\n\r\n            for (let p = 0; p < 50; p++) {\r\n                let tempMesh =new THREE.Mesh(smoke_geo,smoke_mat);\r\n                tempMesh.position.set( Math.random() * 1000 - 500,\r\n                                       Math.random() * 1000 - 500,\r\n                                       Math.random() * 500 );\r\n                tempMesh.rotation.z =  Math.random() * 360;\r\n                smoke_particles.push(tempMesh);\r\n                scene.add(tempMesh);\r\n                //tempMesh.lookAt(camera.position);\r\n                \r\n            }\r\n        \r\n            \r\n        }\r\n\r\n        function GenrateAround()\r\n        {\r\n            \r\n            for (i = 0; i < 50; i++) {\r\n                var vertex = new THREE.Vector3();\r\n                vertex.x = Math.random() * 2000 - 1000;\r\n                vertex.y = Math.random() * 2000 - 1000;\r\n                vertex.z = Math.random() * 2010 - 1000;\r\n                geometry.vertices.push(vertex);\r\n                geometry.colors.push(1.0, 1.0, 1.0);\r\n            }\r\n\r\n            parameters = [\r\n                [[1, 1, 0.5],    5],\r\n                [[0.95, 1, 0.5], 8],\r\n                [[0.90, 1, 0.5], 8],\r\n                [[0.85, 1, 0.5], 8],\r\n                [[0.80, 1, 0.5], 8]\r\n            ];\r\n            let loader = new THREE.TextureLoader();\r\n            let t2d = loader.load('static/img/point1.png');\r\n            for (i = 0; i < 5; i++) {\r\n                //color = // [Math.random() * 255, Math.random() * 255, Math.random() * 255, Math.random() * 255];\r\n                size = Math.random() * 10 + 1;\r\n\r\n                materials[i] = new THREE.PointsMaterial(\r\n                    {\r\n                        transparent:true, //使材质透明\r\n                        blending:THREE.AdditiveBlending, //\r\n                        depthTest:false, //深度测试关闭，不消去场景的不可见\r\n                        size: size,\r\n                        map:t2d\r\n                    });\r\n                let particles = new THREE.Points(geometry, materials[i]);\r\n\r\n                particles.rotation.x = Math.random() * 0;\r\n                particles.rotation.y = Math.random() * 6;\r\n                particles.rotation.z = Math.random() * 6;\r\n\r\n                particles.name = 'around';\r\n                scene.add(particles);\r\n            }\r\n        }\r\n\r\n        function GenrateWaves() {\r\n\r\n            let partile_geometry = new THREE.SphereGeometry( 1, 32, 16 );\r\n            //let temp_color = new THREE.Color().setRGB(152,215,233);\r\n            let temp_color = new THREE.Color().setRGB(244,244,244);\r\n            let temp_mat = new THREE.LineBasicMaterial( { color:temp_color } );\r\n\r\n            let loader = new THREE.TextureLoader();\r\n            let t2d = loader.load('static/img/point1.png');\r\n\r\n            let i_wave = 0;\r\n            for ( let ix = 0; ix < AMOUNTX; ix++ ) {\r\n                for ( let iy = 0; iy < AMOUNTY; iy++ ) {\r\n                    //let temp_sprite_color = new THREE.Color().setRGB(125,253,255);\r\n                    let temp_sprite_color = new THREE.Color().setRGB(0,253,255);\r\n                    let material_wave = new THREE.SpriteMaterial({\r\n                        map: t2d,\r\n                        //useScreenCoordinates: false, \r\n                        color: temp_sprite_color, \r\n                        transparent: true, \r\n                        blending: THREE.AdditiveBlending\r\n                    });\r\n\r\n                    wave_coord.push(new THREE.Vector3 ( ix * SEPARATION - ((AMOUNTX * SEPARATION) / 2),  -500 ,iy * SEPARATION - ((AMOUNTY * SEPARATION) / 2) ) );\r\n                    let follow_particle = new THREE.Sprite(material_wave);\r\n                    let particle_mesh = new THREE.Mesh( partile_geometry, temp_mat );\r\n                    particle_wave = particles_wave[i_wave++] = particle_mesh;\r\n                    \r\n                    particle_wave.position.x = Math.random() * 9000 - 4500;\r\n                    particle_wave.position.z = Math.random() * 9000 - 4500;\r\n                    particle_wave.position.y = Math.random() * 9000 - 4500;\r\n                    \r\n                    particle_wave.scale.x = particle_wave.scale.y = Math.random() * 5 + 1;\r\n                    follow_particle.scale.set(2.4, 2.4, 2.4);\r\n                    particle_wave.add(follow_particle);\r\n\r\n                    scene.add(particle_wave);\r\n\r\n                    if (i_wave > 0) \r\n                    {\r\n                        geometry_wave.vertices.push(particle_wave.position);\r\n                    }\r\n                }\r\n            }\r\n            console.log(particle_wave);\r\n        }\r\n\r\n        this.GenrateGeom = function (_geom) {\r\n            console.log(canvas.height);\r\n            let temp_subHeight =  (canvas.height < 250 ? canvas.height * 1.5 : canvas.height);\r\n            for (var x = 0; x < canvas.width; x++) {\r\n                for (var y = 0; y < canvas.height; y++) {\r\n                    let vec = new THREE.Vector3(y - canvas.width / 2,\r\n                                                x - canvas.height / 2,\r\n                                                1000 - temp_subHeight);\r\n\r\n                    let vec_random = new THREE.Vector3( Math.random() * document.body.clientWidth * 4 - document.body.clientWidth * 2,\r\n                                                        Math.random() * document.body.clientHeight * 4 - document.body.clientHeight * 2,\r\n                                                        Math.random() * 4000 - 2000);\r\n\r\n                    if (IsTransparent(x, y)) {\r\n                        let color = GetVecColor(x, y);\r\n\r\n                        _geom.vertices.push(vec_random);\r\n                        _geom.colors.push(color);\r\n                        imgCoord.push(vec);\r\n                        imgVecColor.push(color);\r\n                    } \r\n                }\r\n            }\r\n            _geom.center();\r\n\r\n            mat = new THREE.PointsMaterial({size: 2, vertexColors: true});\r\n            let cloud = new THREE.Points(geom, mat);\r\n\r\n            cloud.name = 'ImageParticle';\r\n            cloud.rotation.y = Math.PI * 1.8;\r\n            scene.add(cloud);\r\n        }\r\n\r\n        this.tweenAnim = function tweenObj(index) {\r\n            if (geom.vertices.length <= 0)\r\n            {\r\n                this.GenrateGeom(geom);\r\n            }\r\n            else \r\n            {\r\n\r\n                geom.vertices.forEach(function (e, i, arr) {\r\n                    let tweenIns = new TWEEN.Tween(e).to(\r\n                        {\r\n                            x: imgCoord[i].x,\r\n                            y: imgCoord[i].y,\r\n                            z: imgCoord[i].z\r\n                        }, Math.random() * 750 ).easing(TWEEN.Easing.Quadratic.InOut)\r\n                        .delay(Math.random() * 250 );\r\n                    tweenIns.start();\r\n    \r\n                });\r\n    \r\n            }\r\n\r\n        };\r\n\r\n        this.tweenAnim1 = function tweenObj(index) {\r\n            geom.vertices.forEach(function (e, i, arr) {\r\n\r\n                if (Math.random() * 100 > 0) {\r\n                    let tweenIns = new TWEEN.Tween(e).to(\r\n                        {\r\n                            x: imgCoord[i].x * 10,\r\n                            y: imgCoord[i].y * 10,\r\n                            z: imgCoord[i].z * 2 > 1000 ? e.z * 2 : 1001//e.z\r\n                        }, Math.random() * 750 ).easing(TWEEN.Easing.Quadratic.InOut)\r\n                        .delay(Math.random() * 250);\r\n                    tweenIns.start();\r\n                } else {\r\n\r\n\r\n                }\r\n\r\n            })\r\n\r\n        };\r\n\r\n\r\n        this.tweenAnim2 = function tweenObj(index) {\r\n            for (let sceneItem of scene.children) {\r\n                sceneItem.name = \"ImageParticle\";\r\n            }\r\n            setTimeout(() => {\r\n                for (let sceneItem of scene.children) {\r\n                    sceneItem.material.size = 2.5;\r\n                }\r\n            }, 1500);\r\n\r\n            geometry.vertices.forEach(function (e, i, arr) {\r\n                let tweenIns = new TWEEN.Tween(e).to(\r\n                    {\r\n                        x: imgCoord[i].x,\r\n                        y: imgCoord[i].y,\r\n                        z: imgCoord[i].z//e.z\r\n                    }, Math.random() * 500).easing(TWEEN.Easing.Quadratic.In)\r\n                    .delay(Math.random() * 500)\r\n                    .onUpdate(function (i) {\r\n                            geometry.colors[i] = imgVecColor[i];\r\n                        }\r\n                    );\r\n                tweenIns.start();\r\n            });\r\n        };\r\n\r\n        this.tweenAnim3 = function () {\r\n            let bflag = true;\r\n            let bWavesing = false;\r\n        };\r\n\r\n        function onWindowResize() {\r\n            windowHalfX = window.innerWidth / 2;\r\n            windowHalfY = window.innerHeight / 2;\r\n            camera.aspect = window.innerWidth / window.innerHeight;\r\n            camera.updateProjectionMatrix();\r\n            renderer.setSize(window.innerWidth, window.innerHeight);\r\n        }\r\n\r\n        function onDocumentMouseMove(event) {\r\n            mouseX = event.clientX - windowHalfX;\r\n            mouseY = event.clientY - windowHalfY;\r\n        }\r\n\r\n        function onDocumentTouchStart(event) {\r\n            if (event.touches.length === 1) {\r\n                event.preventDefault();\r\n                mouseX = event.touches[0].pageX - windowHalfX;\r\n                mouseY = event.touches[0].pageY - windowHalfY;\r\n            }\r\n        }\r\n\r\n        function onDocumentTouchMove(event) {\r\n            if (event.touches.length === 1) {\r\n                event.preventDefault();\r\n                mouseX = event.touches[0].pageX - windowHalfX;\r\n                mouseY = event.touches[0].pageY - windowHalfY;\r\n            }\r\n        }\r\n\r\n        //\r\n        function animate(time) {\r\n            requestAnimationFrame(animate);\r\n            TWEEN.update(time);\r\n            render();\r\n            stats.update();\r\n        }\r\n\r\n\r\n        function render() {\r\n            var time = Date.now() * 0.00005;\r\n\r\n            if (((mouseX - camera.position.x) > 0 && camera.position.x <  50) ||\r\n                ((mouseX - camera.position.x) < 0 && camera.position.x > -50)) {\r\n                camera.position.x += (mouseX - camera.position.x) * 0.002;\r\n            }\r\n            if (((mouseY - camera.position.y) > 0 && camera.position.y < 50) ||\r\n                ((mouseY - camera.position.y) < 0 && camera.position.y > -50)) {\r\n                camera.position.y += (mouseY - camera.position.y) * 0.005;\r\n            }\r\n            \r\n            camera.lookAt(scene.position);\r\n\r\n            geom.verticesNeedUpdate = true;\r\n            geom.colorsNeedUpdate = true;\r\n            geometry.verticesNeedUpdate = true;\r\n            geometry.colorsNeedUpdate = true;\r\n\r\n\r\n            render_around(time);\r\n            render_wave();\r\n            //render_smoke(time);\r\n\r\n            \r\n            //\r\n            //renderer.render(scene, camera);\r\n            //console.log(composer);\r\n            composer.render(clock.getDelta());\r\n        }\r\n\r\n        function render_smoke(time)\r\n        {\r\n            let delta = clock.getDelta();\r\n            for(let i =0;i < smoke_particles.length ;i++ )\r\n            {\r\n                 \r\n               // smoke_particles[i].rotation.x += 0.005;\r\n               // smoke_particles[i].rotation.y += 0.01;\r\n                //smoke_particles[i].position.set(Math.random() * Math.PI / 1080, Math.random() * Math.PI / 180, Math.random() * Math.PI / 180);\r\n                smoke_particles[i].rotation.z += Math.random() * delta * 0.1;\r\n                //smoke_particles[i].position.z =(Math.sin(0.5) * 500);\r\n\r\n            }\r\n        }\r\n\r\n        function render_around(time)\r\n        {\r\n            let i_around = 0;\r\n            for (let i = 0; i < scene.children.length; i++) {\r\n                var object = scene.children[i];\r\n                if (object.name === 'around' && object instanceof THREE.Points) {\r\n                    object.rotation.y = time * (i_around < 4 ? i_around + 1 : -(i_around + 1)) * 2.5;\r\n                    i_around++;\r\n                }\r\n                else if (object.name === 'ImageParticle') {\r\n                    if (object.rotation.y < 6.28318) \r\n                    {\r\n                        object.rotation.y += Math.PI / 180 * 2;\r\n                    } \r\n                    else if (bflag) \r\n                    {\r\n                        bflag = false;\r\n                        console.log(object.rotation.y);\r\n                        object.rotation.y = 6.283185307179586;\r\n                        ThreeIns.tweenAnim();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function render_wave() {\r\n            let i_wave = 0;\r\n\r\n            if ((particles_wave.length > AMOUNTX * AMOUNTY)) {\r\n                return;\r\n            }\r\n\r\n            if ( bWavesing  )\r\n            {\r\n                count_wave += 0.1;\r\n                /**waves */\r\n                for (let ix = 0; ix < AMOUNTX; ix++) {\r\n                    for (let iy = 0; iy < AMOUNTY; iy++) {\r\n                        let tx = ix;\r\n                        let ty = iy;\r\n\r\n                        particle_wave = particles_wave[i_wave++];\r\n                        \r\n                        particle_wave.position.y = particle_wave.position.y + Math.sin((tx + count_wave) * 0.3) * 1.5  + (Math.sin((ty + count_wave) * 0.5)) ;\r\n                        particle_wave.scale.x = particle_wave.scale.y = (Math.sin((tx + count_wave) * 0.3) + 1) * 2.5 + (Math.sin((ty + count_wave) * 0.5) + 1) * 2.5;\r\n                    }\r\n                }\r\n            }\r\n            else \r\n            {   \r\n                if (!bisN)\r\n                {\r\n                    for (let ix = 0; ix < AMOUNTX; ix++) {\r\n                        for (let iy = 0; iy < AMOUNTY; iy++) {\r\n                            \r\n                            particle_wave = particles_wave[i_wave++];\r\n                            let temp_rad = 0.05;//Math.random() * 0.05 + 0.01 ;\r\n\r\n                            particle_wave.position.x = particle_wave.position.z * Math.sin(temp_rad) + particle_wave.position.x * Math.cos(temp_rad);\r\n                            particle_wave.position.z = particle_wave.position.z * Math.cos(temp_rad) - particle_wave.position.x * Math.sin(temp_rad);\r\n                        }\r\n                    }\r\n                }\r\n\r\n\r\n            }\r\n            //tex+= 0.1;\r\n        }\r\n\r\n        this.init();\r\n    }\r\n\r\n\r\n\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (ThreeIns);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/js/main.js\n");

/***/ })

/******/ });